/** This file was generated by the Gradle 'init' task.***/

plugins {
    id 'java'
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.1.3'
    testImplementation("org.testng:testng:7.3.0") {
        transitive = false
    }
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.22.0'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.1.1'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-grid', version: '4.1.3'
    implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.17.3'
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.2.3'
    implementation group: 'io.cucumber', name: 'cucumber-testng', version: '7.2.3'
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.0.1'
}

/**Project info**/

group = 'com.epam'
version = '1.0-SNAPSHOT'
description = 'Trello'
java.sourceCompatibility = JavaVersion.VERSION_11

/**Settings constants**/

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/*** TestNG.xml is for allure reports only. Tests in gradle are the tasks.***/
tasks.withType(Test) { //any tests properties
    useTestNG {
        def dirTestNg = System.getProperty("testngReportOutput")
        outputDirectory = dirTestNg ? file(dirTestNg) : file("$buildDir/testngQaReports") //testng reports
        def dirGradleReports = System.getProperty("gradleReportOutput")
        outputDirectory = dirGradleReports ? file(dirGradleReports) : file("$buildDir/target/gradleHtmlQaReport")
        //gradle reports
        useDefaultListeners = true
    }
}

boolean runParallelTests
if (runParallelTests = true) {
    test.maxParallelForks(2)
    test.forkEvery(2)
}

boolean markTestPassStatus
if (markTestPassStatus = true) {
    test.systemProperties System.properties
    test.testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    test.testLogging.showStandardStreams = true
}

/***==================================================
 *                 TEST LIST
 * ===================================================
 * For example use prompt command: ./gradle cards test
 * and only tests filtered by the task "cards" will run
 * ===============================================***/

// Run all tests (include low priority)
task extendedTest(type: Test) {
    runParallelTests = false
    markTestPassStatus = true
}


// Smoke test (basic functionality testing)
task smokeTest(type: Test) {
    runParallelTests = false
    markTestPassStatus = true
    useTestNG {
        includeGroups 'smoke'
    }
}

// Critical path tests (regular using functionality testing, general requirements)
task criticalPathTest(type: Test) {
    runParallelTests = false
    markTestPassStatus = true
    useTestNG {
        includeGroups 'critical_path'
    }
}

//

// Tests by packages (test suite lists)
task automation(type: Test) {
    runParallelTests = true
    markTestPassStatus = true
    filter {
        includeTestsMatching("automation*")
    }
}

task boards(type: Test) {
    runParallelTests = true
    markTestPassStatus = true
    filter {
        includeTestsMatching("boards*")
    }
}
task cards(type: Test) {
    runParallelTests = true
    markTestPassStatus = true
    filter {
        includeTestsMatching("cards*")
    }
}
task login(type: Test) {
    runParallelTests = false
    markTestPassStatus = true
    filter {
        includeTestsMatching("login*")
    }
}
task register(type: Test) {
    runParallelTests = false
    markTestPassStatus = true
    filter {
        includeTestsMatching("register*")
    }
}
task settings(type: Test) {
    runParallelTests = true
    markTestPassStatus = true
    filter {
        includeTestsMatching("settings*")
    }
}
task workspaces(type: Test) {
    runParallelTests = true
    markTestPassStatus = true
    filter {
        includeTestsMatching("workspace*")
    }
}
